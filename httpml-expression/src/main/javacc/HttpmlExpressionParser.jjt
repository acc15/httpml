options {
    LOOKAHEAD = 1;
    STATIC = false;
    // MULTI = false;
}

PARSER_BEGIN(HttpmlExpressionParser)

package httpml.expression.parser;

import httpml.expression.ast.HttpmlTemplate;
import java.util.List;
import java.util.Map;

public class HttpmlExpressionParser {
}

PARSER_END(HttpmlExpressionParser)

TOKEN: {
    <ESCAPE: "\\" ~[]>
}

<DEFAULT, IN_EXPRESSION> TOKEN: {
    <EXPR_START: "${"> : IN_EXPRESSION
}

<IN_EXPRESSION> SKIP : {
    "\n" | "\r" | "\t" | " "
}

<IN_EXPRESSION> TOKEN : {
    <IDENTIFIER: (["a"-"z", "A"-"Z", "0"-"9", "_", "-"])+>
}

<IN_EXPRESSION> TOKEN : {
    <LPAR: "(">
|   <RPAR: ")">
|   <COMMA: ",">
}


<IN_EXPRESSION> TOKEN : {
    <EXPR_END: "}"> : DEFAULT
}

TOKEN: {
    <TEXT: ~[]>
}

HttpmlTemplate parseTemplate() :
{
    Token t;
    StringBuilder builder = new StringBuilder();
    final Map<Character, Character> escapeMap = Map.of(
        'b', '\b',
        't', '\t',
        '0', '\0',
        'n', '\n',
        'r', '\r'
    );
}
{
    (
        t = <TEXT> | <ESCAPE> { builder.append(t.image); }
    )* <EOF>
    { return new HttpmlTemplate(List.of()); }
}

HttpmlExpression parseExpression() :
{
    Token t;
    StringBuilder builder = new StringBuilder();
    final Map<Character, Character> escapeMap = Map.of(
        'b', '\b',
        't', '\t',
        '0', '\0',
        'n', '\n',
        'r', '\r'
    );
}
{
    (
        t = <TEXT> | <ESCAPE> { builder.append(t.image); }
    )* <EOF>
    { return new HttpmlTemplate(List.of()); }
}
